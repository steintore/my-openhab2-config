import org.eclipse.smarthome.core.library.types.OnOffType
import org.eclipse.smarthome.model.script.actions.Timer
import org.joda.time.DateTime

var Timer timerBasement = null
var Timer timerBathroom = null
var Timer sunsetTimer = null

rule "motion detected in the bathroom" 
	when
		Item bathroom_motion changed
	then
	logInfo("org.openhab.rules.lights", "Motion sensor in the bathroom changed to: " + bathroom_motion.state)
	switch (bathroom_motion.state as OnOffType) {
		case ON: {
			if (mode.state != 2) {
				if (mode.state == 0 || mode.state == 99) { //HOME OR PARTY
					scene_bathroom_light.sendCommand(2) //DAY
				} else {
					scene_bathroom_light.sendCommand(1) // NIGHT
				}	
				if (timerBathroom === null) {
					timerBathroom = createTimer(now.plusSeconds(240)) [|
						logInfo("org.openhab.rules.lights", "Bathroom dimmer timer timed out, state for motion: " + bathroom_motion.state)
						if (bathroom_motion.state == ON) {
							timerBathroom.reschedule(now.plusSeconds(240))
						} else {
							scene_bathroom_light.sendCommand(0)
					
							if(timerBathroom!== null) {
								if(timerBathroom.running) {
									timerBathroom.cancel()
								}	
								timerBathroom = null
							}
						}
						]
				} else {
					timerBathroom.reschedule(now.plusSeconds(240))
					logInfo("org.openhab.rules.lights", "Bathroom dimmer timer rescheduled to 240 seconds from now")
				}
			}
		}
		case OFF: {
			if (timerBathroom === null) {
				timerBathroom = createTimer(now.plusSeconds(120)) [|
					logInfo("org.openhab.rules.lights", "Bathroom dimmer timer created by OFF-signal timed out, state for motion: '" + bathroom_motion.state)
					if (bathroom_motion.state == ON) {
						timerBathroom.reschedule(now.plusSeconds(120))
					} else {
						scene_bathroom_light.sendCommand(0)
				
						if(timerBathroom!== null) {
							if(timerBathroom.running) {
								timerBathroom.cancel()
							}	
							timerBathroom = null
						}
					}
					]
			}
		}
	}
end

rule "Motion in hall"
when
	Item hall_gf_motion changed
then
	logInfo('org.openhab.rules.lights', 'Item hall_gf_motion changed to ' + hall_gf_motion.state.toString)
	switch (hall_gf_motion.state as OnOffType) {
		case ON: {
			light_hall_ground_floor.sendCommand(ON)
			if (justMorning.state == ON) {
				logInfo('org.openhab.rules.lights', 'Item hall_gf_motion changed runs the morning routine.. good morning!')
				scene_light_livingroom.sendCommand(1)
				justMorning.postUpdate(OFF)
				Thread::sleep(100)
				if (alarm_alarm.state == 'armedhome') {
					postUpdate(push_message_text, "Husk å skru av alarmen!")
				}
			}
			if (mode.state == 2) {
				postUpdate(alarm_check_now, "" + now)
				logInfo('org.openhab.rules.lights', 'Item hall_gf_motion changed want alarm status to be checked')
			}				
			screen_pi_screen.sendCommand(ON)
		}
		case OFF: {
			if (mode.state != 99 && mode.state != 3) {
				light_hall_ground_floor.sendCommand(OFF)
				postUpdate(screen_pi_screen, OFF)
			}
		}
	}
end

rule "scene for lights in living room"
when
	Item scene_light_livingroom received command
then
	logInfo('org.openhab.rules.lights', 'scene_light_livingroom received state:' + receivedCommand)
	postUpdate(remote_living_room, UNDEF)
	switch (receivedCommand) {
		case 0: { // OFF
			living_room_lights.sendCommand(OFF)
			gLivingRoomLights.sendCommand(OFF)
			gLivingRoomLightsDimmer.sendCommand(0)
			postUpdate(homekit_livingroom_light, OFF)
		}
		case 1: { // ON
			living_room_lights.sendCommand(ON)
			gLivingRoomLights.sendCommand(ON)
			postUpdate(homekit_livingroom_light, ON)
			gLivingRoomLightsDimmer.sendCommand(100)
		}
		case 2: { // COZY
			gLivingRoomLights.sendCommand(ON)
			gLivingRoomLightsDimmer.sendCommand(30)
 			Thread::sleep(600)
 			livingroom_oslo_color.sendCommand(100)
 			livingroom_window_color.sendCommand(100)
 			Thread::sleep(600)
			light_living_old.sendCommand(OFF)
			postUpdate(homekit_livingroom_light, ON)
		}
	}
end

rule "change scene for lights in hall ground floor"
when
 	Item scene_light_hall_gf received command
then
	logInfo('org.openhab.rules.lights', 'Item scene_light_hall_gf received command ' + receivedCommand)
 	switch(receivedCommand) {
 		case 0: {
 			light_hall_ground_floor.sendCommand(OFF)
 			postUpdate(homekit_light_hall, OFF)
 		}
 		case 1: {
 			light_hall_ground_floor.sendCommand(ON)
 			postUpdate(homekit_light_hall, ON)
 		}
 		case 2: {
 			if (hall_gf_motion.state == ON) {
 				light_hall_ground_floor.sendCommand(ON)
 				postUpdate(homekit_light_hall, ON)
 			 } else {
 				light_hall_ground_floor.sendCommand(OFF)
 				postUpdate(homekit_light_hall, OFF)
			}
 		}
 	}
end

rule "light bathroom 1st floor" 
	when
		Item scene_bathroom_light received command
	then
	switch(receivedCommand) {
		case 0: {// OFF
			light_bathroom_mirror.sendCommand(OFF)
			light_bathroom.sendCommand(OFF)
			light_bathroom_dimmer.sendCommand(0)
		}
		case 1: {//NIGHT
			light_bathroom_dimmer.sendCommand(10)
			light_bathroom_mirror.sendCommand(ON)
		}
		case 2: {//DAY
			light_bathroom_dimmer.sendCommand(80)
			light_bathroom_mirror.sendCommand(ON)
		}
		case 3: {//FULL
			light_bathroom_dimmer.sendCommand(100)
			light_bathroom_mirror.sendCommand(ON)
		}
	}
end

rule "light in hall 1st floor"
	when
		Item scene_light_hall received command
	then
	logInfo('org.openhab.rules.lights', "Item scene_light_hall received command " + receivedCommand)
	switch (receivedCommand) {
		case 0:  { //OFF 
			gHallLightsDimmer.sendCommand(0)
			postUpdate(homekit_light_hall_1st_floor, OFF)
		}
		case 1: { //ON
			gHallLightsDimmer.sendCommand(100)
			postUpdate(homekit_light_hall_1st_floor, ON)
		}
		case 2: { //NIGHT MODE
			light_hall_1.sendCommand(0)
			light_hall_2.sendCommand(30)
			light_hall_3.sendCommand(30)
			light_hall_4.sendCommand(0)
			postUpdate(homekit_light_hall_1st_floor, ON)
		}
		case 3: { // EVENING MODE
			light_hall_1.sendCommand(60)
			light_hall_2.sendCommand(60)
			light_hall_3.sendCommand(60)
			light_hall_4.sendCommand(60)
			postUpdate(homekit_light_hall_1st_floor, ON)
		}
	}
end

rule "lights in hall changed from other source"
	when
		Item light_hall_1 received update or
		Item light_hall_2 received update or
		Item light_hall_3 received update or
		Item light_hall_4 received update
	then
	logDebug('org.openhab.rules.lights', "lights in hall changed from other source")
	if (light_hall_1.state == 0 && light_hall_2.state == 0 && light_hall_3.state == 0 && light_hall_4.state == 0) {
		postUpdate(scene_light_hall, 0)
	} else if (light_hall_1.state == 100 && light_hall_2.state == 100 && light_hall_3.state == 100 && light_hall_4.state == 100) {
		postUpdate(scene_light_hall, 1)
	} else {
		postUpdate(scene_light_hall, 2)
	}
end

rule "light in basement hall"
	when
		Item scene_light_basement_hall received command
	then
	logDebug('org.openhab.rules.lights', "Item scene_light_basement_hall received command " + receivedCommand)
	switch (receivedCommand) {
		case 0:  { //OFF 
			gBasementHallLights.sendCommand(0)
			postUpdate(homekit_basement_light, OFF)
		}
		case 1: { //ON
			gBasementHallLights.sendCommand(100)
			postUpdate(homekit_basement_light, ON)
		}
		case 2: { //NIGHT MODE
			gBasementHallLights.sendCommand(50)
			postUpdate(homekit_basement_light, ON)
		}
	}
end

rule "lights in basement hall changed from other source"
	when
		Item light_basement_1 received update or
		Item light_basement_2 received update or
		Item light_basement_3 received update or
		Item light_basement_4 received update
	then
	logDebug('org.openhab.rules.lights', "Lights in basement hall changed from other source")
	if (light_basement_1.state == 0 && light_basement_2.state == 0 && light_basement_3.state == 0 && light_basement_4.state == 0) {
		postUpdate(scene_light_basement_hall, 0)
	} else if (light_basement_1.state == 100 && light_basement_2.state == 100 && light_basement_3.state == 100 && light_basement_4.state == 100) {
		postUpdate(scene_light_basement_hall, 1)
	} else {
		postUpdate(scene_light_basement_hall, 2)
	}
end

rule "Basement hall motion detector"
	when
		Item basement_hall_motion changed
	then
	logInfo('org.openhab.rules.lights', 'Motion sensor in the basement changed to: ' + basement_hall_motion.state)
	switch (basement_hall_motion.state as OnOffType) {
		case ON: {
			scene_light_basement_hall.sendCommand(1)		
		}
		case OFF: {
			if (mode.state != 99 && scene_light_laundry.state == OFF && scene_basement_room_light.state == OFF)
				scene_light_basement_hall.sendCommand(0)
		}
	}
end

rule "Sunset"
	when
		Item Sunset_Time changed
 	then
 		logInfo("org.openhab.rules.lights","Sunset_Time changed to " + Sunset_Time.state.toString())
 		var DateTime sunset = new DateTime((Sunset_Time.state as DateTimeType).calendar.timeInMillis)
 		if (sunset.beforeNow) sunset = sunset.plusDays(1)
 		
 		if (sunsetTimer !== null) {
 			sunsetTimer.cancel()
 			sunsetTimer = null
 		}
 		logInfo("org.openhab.rules.lights", 'Creating timer to turn on living room lights at: ' + sunset.minusMinutes(60).toString);
 		sunsetTimer = createTimer(sunset.minusMinutes(60)) [|
 			if (mode.state == 1 || holiday_mode.state == ON) { // IF HOME or holiday
			 	sendNotification("{{stein_email}}","Slår på lys i stua! Det var: " + scene_light_livingroom.state.toString())
 				scene_light_livingroom.sendCommand(1)
 			}
 		]	
 end
 
 
 rule "Office light"
 	when
 		Item scene_office_light received command
 	then
 	logInfo("org.openhab.rules.lights", 'Scene office light received command: ' + receivedCommand)
 	switch (receivedCommand) {
 		case 0: { // OFF
 			gOfficeLights.sendCommand(OFF)
 		}
 		case 1: { // RELAX
 			office_light.sendCommand(ON)
 			office_light_color.sendCommand(100)
 			office_light_brightness.sendCommand(30)
 		}
 		case 2: { // WORK
 			office_light.sendCommand(ON)
 			office_light_color.sendCommand(0)
 			office_light_brightness.sendCommand(100)
 		}
 		case 3: { // NORMAL
 			office_light.sendCommand(ON)
 			office_light_color.sendCommand(50)
 			office_light_brightness.sendCommand(80)
 		}
 	}
end

rule "Scene basement room light changed"
 	when
 		Item scene_basement_room_light received command
 	then
 	logInfo("org.openhab.rules.lights", 'Scene basement room light received command: ' + receivedCommand)
 	switch (receivedCommand) {
 		case 0: { // OFF
 			gBasementRoomLights.sendCommand(OFF)
 		}
 		case 1: { // RELAX
 			gBasementRoomLights.sendCommand(ON)
 			Thread::sleep(600)
 			basement_room_roof_1_color.sendCommand(100)
 			basement_room_roof_2_color.sendCommand(100)
 			basement_room_roof_3_color.sendCommand(100)
			basement_room_roof_4_color.sendCommand(100)
			basement_room_roof_5_color.sendCommand(100)
			basement_room_oslo_color.sendCommand(100)
			basement_room_bar_color.sendCommand(100)
			basement_room_canvas_color.sendCommand(100)
 			Thread::sleep(600)
 			gBasementRoomLightsDimmer.sendCommand(30)
 		}
 		case 2: { // WORK
 			gBasementRoomLights.sendCommand(ON)
 			Thread::sleep(600)
 			basement_room_roof_1_color.sendCommand(30)
 			basement_room_roof_2_color.sendCommand(30)
 			basement_room_roof_3_color.sendCommand(30)
			basement_room_roof_4_color.sendCommand(30)
			basement_room_roof_5_color.sendCommand(30)
			basement_room_oslo_color.sendCommand(30)
			basement_room_bar_color.sendCommand(30)
			basement_room_canvas_color.sendCommand(30)
 			Thread::sleep(600)
 			gBasementRoomLightsDimmer.sendCommand(100)
 		}
 		case 3: { // NORMAL
 			gBasementRoomLights.sendCommand(ON)
 			Thread::sleep(600)
 			basement_room_roof_1_color.sendCommand(50)
 			basement_room_roof_2_color.sendCommand(50)
 			basement_room_roof_3_color.sendCommand(50)
			basement_room_roof_4_color.sendCommand(50)
			basement_room_roof_5_color.sendCommand(50)
			basement_room_oslo_color.sendCommand(50)
			basement_room_bar_color.sendCommand(50)
			basement_room_canvas_color.sendCommand(50)
 			Thread::sleep(600)
 			gBasementRoomLightsDimmer.sendCommand(80)
 		}
 	}
end

rule "Scene basement room light changed"
 	when
 		Item scene_light_laundry received command
 	then
 	logInfo("org.openhab.rules.lights", 'Scene basement room light received command: ' + receivedCommand)
	 //0="Av", 1="Fokus", 3="Normal"
 	switch (receivedCommand) {
 		case 0: { // OFF
 			gLaundryRoomLights.sendCommand(OFF)
 		}
 		case 1: { // WORK
 			gLaundryRoomLights.sendCommand(ON)
 			Thread::sleep(600)
 			laundry_room_roof_1_color.sendCommand(30)
 			laundry_room_roof_2_color.sendCommand(30)
 			laundry_room_roof_3_color.sendCommand(30)
			laundry_room_roof_4_color.sendCommand(30)
			laundry_room_roof_5_color.sendCommand(30)
 			Thread::sleep(600)
 			gLaundryLightsDimmer.sendCommand(100)
 		}
 		case 3: { // NORMAL
 			gLaundryRoomLights.sendCommand(ON)
 			Thread::sleep(600)
 			laundry_room_roof_1_color.sendCommand(50)
 			laundry_room_roof_2_color.sendCommand(50)
 			laundry_room_roof_3_color.sendCommand(50)
			laundry_room_roof_4_color.sendCommand(50)
			laundry_room_roof_5_color.sendCommand(50)
 			Thread::sleep(600)
 			gLaundryLightsDimmer.sendCommand(80)
 		}
 	}
end

rule "Remote living received command"
	when
		Item remote_living_room received command
	then
	logInfo("org.openhab.rules.lights", "Remote living room received command " + receivedCommand)
	switch (receivedCommand.toString) {
		case "10": { // Living room lights on
			scene_light_livingroom.sendCommand(1)
		}
		case "20": {
			// ??? 
		}
		case "30": { // Living room lights off
			scene_light_livingroom.sendCommand(0)
		}
		case "40": {
			// Less light.. Cozy
			scene_light_livingroom.sendCommand(2)
		}
	}
end

rule "lights in basement room changed from other source"
	when
		Item gBasementRoomLights changed or
		Item gBasementRoomLightsDimmer received update
	then

	if (gBasementRoomLights.state == OFF) {
		scene_basement_room_light.postUpdate(0)
	} else if (gBasementRoomLightsDimmer.state == 30) {
		scene_basement_room_light.postUpdate(1)
	} else if (gBasementRoomLightsDimmer.state == 80) {
		scene_basement_room_light.postUpdate(3)
	} else if (gBasementRoomLightsDimmer.state == 100) {
		scene_basement_room_light.postUpdate(2)
	}
end

rule "lights in laundry room changed from other source"
	when
		Item gLaundryRoomLights changed or
		Item gLaundryLightsDimmer received update
	then

	if (gLaundryRoomLights.state == OFF) {
		scene_basement_room_light.postUpdate(0)
	} else if (gLaundryLightsDimmer.state == 80) {
		scene_basement_room_light.postUpdate(3)
	} else if (gLaundryLightsDimmer.state == 100) {
		scene_basement_room_light.postUpdate(1)
	}
end
