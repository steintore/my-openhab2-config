import org.eclipse.smarthome.model.script.actions.Timer
import org.joda.time.DateTime

var Timer checkAlarmTimer = null

rule "Set alarm climate items"
	when
		Time cron "0 0 0/2 1/1 * ? *"
		or
		Item alarm_climate received update
then
		var String json = executeCommandLine("node@@{{openhab_configuration_dir}}/scripts/alarm-climate.js", 5000)
        if (json !== null && json != "") {
        	logInfo("org.openhab.rules.alarm", "Got response from alarm-climate: ["+ json + "]")
        		try {
        			var String climate = json.replace('&#176;', '')

					// TEMPERATURE
	                var String temp_string = ''
	                temp_string = transform("JSONPATH", "$.[?(@.location=='GANG')].temperature", climate).replace('[\"', '').replace('\"]','').replace(',','.')
	                postUpdate(alarm_temperature_hall_gf, temp_string)

	                temp_string = transform("JSONPATH", "$.[?(@.location=='GANG NEDE')].temperature", climate).replace('[\"', '').replace('\"]','').replace(',','.')
	                postUpdate(alarm_temperature_hall_basement, temp_string)

	                temp_string = transform("JSONPATH", "$.[?(@.location=='Gang oppe')].temperature", climate).replace('[\"', '').replace('\"]','').replace(',','.')
	                postUpdate(alarm_temperature_hall_1st, temp_string)

	                temp_string = transform("JSONPATH", "$.[?(@.location=='vaskerom')].temperature", climate).replace('[\"', '').replace('\"]','').replace(',','.')
	                postUpdate(alarm_temperature_laundry, temp_string)

					temp_string = transform("JSONPATH", "$.[?(@.location=='KJØKKEN')].temperature", climate).replace('[\"', '').replace('\"]','').replace(',','.')
                	postUpdate(alarm_temperature_kitchen, temp_string)

	                // HUMIDITY
	                temp_string = transform("JSONPATH", "$.[?(@.location=='GANG')].humidity", climate).replace('[\"', '').replace('\"]','').replace(',','.')
	                var String[] humidity = temp_string.split('%')
	                postUpdate(alarm_humidity_hall_gf, humidity.get(0).replace(',', '.'))

	                temp_string = transform("JSONPATH", "$.[?(@.location=='GANG NEDE')].humidity", climate).replace('[\"', '').replace('\"]','').replace(',','.')
	                humidity = temp_string.split('%')
	                postUpdate(alarm_humidity_hall_basement, humidity.get(0).replace(',', '.'))

	                temp_string = transform("JSONPATH", "$.[?(@.location=='Gang oppe')].humidity", climate).replace('[\"', '').replace('\"]','').replace(',','.')
	                humidity = temp_string.split('%')
	                postUpdate(alarm_humidity_hall_1st, humidity.get(0).replace(',', '.'))

	                temp_string = transform("JSONPATH", "$.[?(@.location=='vaskerom')].humidity", climate).replace('[\"', '').replace('\"]','').replace(',','.')
	                humidity = temp_string.split('%')
	                postUpdate(alarm_humidity_laundry, humidity.get(0).replace(',', '.'))
	                logInfo("org.openhab.rules.alarm", "Has updated climate-data from json")
                } catch (Exception e) {
                	logError("org.openhab.rules.alarm", "Something went wrong when trying to parse json {}, exception is: {}", json, e)
                }
        } else {
                logError("org.openhab.rules.alarm", "Tried to fetch climate-data, but only got null..")
        }
end

rule "Check alarm state NOW"
when 
	Item alarm_check_now received update
then
	logInfo("org.openhab.rules.alarm", "Checking status from alarm NOW")
	var String json = executeCommandLine("node@@{{openhab_configuration_dir}}/scripts/alarm.js", 5000)
	logInfo("org.openhab.rules.alarm", "JSON is [" + json + "]")
	var String alarmstate = null
	if (json !== null && json != '') {
		alarmstate = transform("JSONPATH", "$.status", json)
		logInfo("org.openhab.rules.alarm", "Alarm state is now [" +  alarmstate + "]")
		if (alarmstate !== null)
			alarm_alarm.sendCommand(alarmstate)
	}
	if (json === null || alarmstate === null) { 
		logInfo("org.openhab.rules.alarm", "Result from checking alarm was [" + json + "] - [" + alarmstate + "], so we will check again in 15 seconds or so...")
		postUpdate(alarm_check, "" + now)
	}
end

rule "Check alarm state"
when
	Item alarm_check received update
then
	logInfo("org.openhab.rules.alarm", "Item alarm_check received update: " + alarm_check)
	if (checkAlarmTimer === null) {
		checkAlarmTimer = createTimer(now.plusSeconds(15)) [|
			logInfo("org.openhab.rules.alarm", "Timer [checkAlarmTimer] has timed out. Checking status from Alarm")
        	var String json = executeCommandLine("node@@{{openhab_configuration_dir}}/scripts/alarm.js", 5000)
        	logInfo("org.openhab.rules.alarm", "JSON is [" + json + "]")
        	var String alarmstate = null
        	if (json !== null && json != '' && !json.contains("Error")) {
				alarmstate = transform("JSONPATH", "$.status", json)
				logInfo("org.openhab.rules.alarm", "Alarm state is then [" +  alarmstate + "]")
			}
			if (alarmstate === null || alarmstate.contains("Error")) {
				logInfo("org.openhab.rules.alarm", "Could not get alarm state, trying again in 30 seconds..., json is: [" + json + "], alarmstate is: [" + alarmstate + "]")
				if (checkAlarmTimer !== null) 
					checkAlarmTimer.reschedule(now.plusSeconds(30))
			} else {
				if(checkAlarmTimer !== null) {
					if(checkAlarmTimer.running) {
						checkAlarmTimer.cancel()
					}
					checkAlarmTimer = null
				}
				alarm_alarm.sendCommand(alarmstate)
			}
		]
	}
end

rule "Arming, disarming alarm"
when
		Item alarm_alarm received command
then
	Thread::sleep(100)
	logInfo("org.openhab.rules.alarm", "[Item alarm_alarm received command] Alarm state changed to: " + alarm_alarm.state.toString() + " receivedCommand:" + receivedCommand)
	if (alarm_alarm.state === null) {
		logInfo("org.openhab.rules.alarm", "Alarm state is null, trying to fetch state again...")
		postUpdate(alarm_check, ""+ now)
	} else {
		logInfo("org.openhab.rules.alarm", "Alarm state changed to: " + alarm_alarm.state.toString() + " mode is: " + mode.state)
		if ((alarm_alarm.state.toString() == "unarmed" || alarm_alarm.state.toString() == "armedhome") && mode.state == 2) 
		{
			logInfo("org.openhab.rules.alarm", "Looks like someone came home...")
			activate_cameras.sendCommand(OFF)
			var DateTime eveningTime = now.withTime(21, 0, 0, 0)
			var DateTime nightTime = now.withTime(1,0,0,0)
			var DateTime dayTime = now.withTime(5,0,0,0)

			if(nightTime.afterNow && dayTime.beforeNow) {
				mode.sendCommand(0)// HOME
			} else if (nightTime.beforeNow && dayTime.afterNow) {
				mode.sendCommand(1)// NIGHT
			} else if (nightTime.afterNow || eveningTime.beforeNow) {
				if (mode.state != 1) {
					mode.sendCommand(0)// HOME
					Thread::sleep(2000)
					mode.sendCommand(3)// EVENING
				}
			} else {
				mode.sendCommand(0)// HOME
			}
		} else if (alarm_alarm.state.toString() == "armedaway" || alarm_alarm.state.toString() == "armed") {// AWAY
			mode.sendCommand(2)
			activate_cameras.sendCommand(ON)
		} else if (alarm_alarm.state.toString() == "unarmed") {
			logInfo("org.openhab.rules.alarm", "Nothing done after alarm state check, mode is: " + mode.state.toString)
		} else {
			alarm_alarm.postUpdate(null)
			logInfo("org.openhab.rules.alarm", "Ukjent alarmstatus: " + alarm_alarm.state.toString())
			sendNotification("{{stein_email}}","Ukjent alarmstatus: " + alarm_alarm.state.toString())
		}
	}
end

// Creates an item that stores the last update time of this item
rule "Records last temperature update time"
when
  Item alarm_temperature_hall_1st received update
then
  postUpdate(alarm_temperature_hall_1st_LastUpdate, now.toString())
end

rule "Leaving home, we think"
when
	Item home_away_lan changed
then
	logInfo("org.openhab.rules.alarm","Arduino state changed to: " + home_away_lan.state + ", checking alarm")
	postUpdate(alarm_check, "" + now)
end


rule "Lock or unlock the door"
	when
		Item alarm_door_lock received command
	then
	logInfo("org.openhab.rules.alarm", "Item alarm_door_lock received command " + alarm_door_lock + " state of door lock is " + alarm_door_locked_state)
	var String cmd = "vsure {{alarm_login}} {{alarm_password}} set lock {{alarm_key}} '{{alarm_lock_id}}'"
	logInfo("org.openhab.rules.alarm", "The cmd will be: " + cmd)
	switch (receivedCommand) {
		case ON: {
			// Lock door
			var result = executeCommandLine(cmd + " lock", 5000)
			logInfo("org.openhab.rules.alarm", "result from locking the door is: " + result)
		}
		case OFF: {
			// Unlock door
			var result = executeCommandLine(cmd + " unlock", 5000)
			logInfo("org.openhab.rules.alarm", "result from unlocking the door is: " + result)
		}
	}
	postUpdate(alarm_door_lock_check, now.toString)
end


rule "Check the status off the door lock"
	when
		Item alarm_door_lock_check received update
	then
	var result = executeCommandLine("vsure {{alarm_login}} {{alarm_password}} overview doorLockStatusList", 5000)
	logInfo("org.openhab.rules.alarm", "Door lock state is now: " + result)
	if (result !== null) {
		postUpdate(alarm_door_locked_state, transform("JSONPATH", "$..lockedState", result).replace('[\"', '').replace('\"]','').replace(',','.'))
		postUpdate(alarm_door_current_lock_state, transform("JSONPATH", "$..currentLockState", result).replace('[\"', '').replace('\"]','').replace(',','.'))
		postUpdate(alarm_door_motor_jam, transform("JSONPATH", "$..motorJam", result).replace('[\"', '').replace('\"]','').replace(',','.'))
		postUpdate(alarm_door_method, transform("JSONPATH", "$..method", result).replace('[\"', '').replace('\"]','').replace(',','.'))
	}
	if (mode.state == 1 && alarm_door_locked_state.state.toString() == 'UNLOCKED') {
		push_message_text.postUpdate("Husk å låse døra når du legger deg...")
	}
end
