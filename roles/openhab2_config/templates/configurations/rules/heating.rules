import org.eclipse.smarthome.core.library.types.DecimalType
import org.eclipse.smarthome.model.script.actions.Timer
import org.joda.time.DateTime
import org.joda.time.Duration

var Timer timerBFWeekdaysOn = null
var Timer timerBFWeekdaysOff = null
var Timer timerBFWeekendOn = null
var Timer timerBFWeekendOff = null

var Timer timerBathroomGFHeating = null
var Timer timerBathroomGFOn = null
var Timer timerBathroomGFOff = null

var String logString = "org.openhab.rules.heating"

rule "If the room is too cold and we are home, then heat it up, but only if it is less than 10 degrees outside"
	when
		Time cron "0 0/20 * * * ?"
	then
		var double tempOffice = new Double(OfficeTemperature.state.toString())
		var double tempOutdoor = new Double(OutdoorTemperature.state.toString())
		var double tempBasement = new Double(BasementTemperature.state.toString())
		var double tempLivingroom = new Double(LivingRoomTemperature.state.toString())

		if(holiday_mode.state == OFF) {
			if (tempOutdoor <= 10 && Temp_Max_0.state < 10) {
				if (gang_panelovn.state == OFF && mode.state == 0) {
					if (tempOffice < 17) {
						gang_panelovn.sendCommand(ON)
					}
				}
				if (tempBasement < 16 && BasementTemperature.maximumSince(now.minusMinutes(21)).state >= 78) {
					sendNotification("{{stein_email}}",'Kjellertemp er nå: ' + tempBasement + " - den har gått fra " + BasementTemperature.maximumSince(now.minusMinutes(21)).state + " de siste 20 minuttene")
				}
				if (tempLivingroom < (new Double(ac_heat_temp.state.toString()) - 2) && mode.state == 0 && ac_scene.state != 1) {
					ac_scene.sendCommand(1)
				} else if (tempLivingroom < (new Double(ac_night_temp.state.toString()) -1) && mode.state == 1 && ac_scene.state != 1) {
					ac_scene.sendCommand(1)
				} else if (tempLivingroom < (new Double(ac_night_temp.state.toString()) -2) && mode.state == 2 && ac_scene.state != 1) {
					ac_scene.sendCommand(1)
				}

			}

			if (tempOutdoor >= 15 && ac_scene.state == 1) {
				sendCommand(ac_scene , 0)
				logInfo(logString, "Switched of air conditioner because outdoor temp is higher than 19.")
				}

		} else {
			if (tempBasement < 12 || tempLivingroom < 12 || tempOffice < 12) {
				sendNotification("{{stein_email}}","En eller annen temperatur er under 12 grader: [Stue: " + tempLivingroom + ", kontor: " + tempOffice + ", kjeller: " + tempBasement + "]")
				if (tempLivingroom < 12)
					ac_scene.sendCommand(1)
				if (tempOffice < 12) {
					sendNotification("{{stein_email}}","Kontortemperaturen er veldig lav: " + tempOffice)
					gang_panelovn.sendCommand(ON)
				}
			}
		}

end

rule "When the error code from the AC changes, please let me know"
	when
		Item ac_error changed
	then
	sendNotification("{{stein_email}}","AC Error changed to: " + ac_error.state.toString())
end

rule "AC scenes"
	when
		Item ac_scene received command
then
	logInfo(logString, 'AC received state:' + ac_scene.state)
	switch (receivedCommand) {
		case 0: { // OFF
			if (ac_power.state == ON)
				ac_power.sendCommand(OFF)
		}
		case 1: { // HEATING
			var double tempOutdoor = new Double(OutdoorTemperature.state.toString())
			var double lowerTempThreshold = new Double(AC_lower_temp_threshold.state.toString())
			var double additionalDegrees = new Double(AC_additional_degrees.state.toString())
			if (ac_power.state == OFF)
				ac_power.sendCommand(ON)

			// Set to heating if not already set
			if (ac_op_mode.state != 4)
				ac_op_mode.sendCommand(4)

			// set direction to fixed
			if (ac_direction.state != 3)
				ac_direction.sendCommand(3)

			// windlevel
			if (ac_windlevel.state != 0)
				ac_windlevel.sendCommand(0)

			// correct temperature
			if (mode.state == 0 || mode.state == 3) { //HOME
				if (ac_set_temp.state != ac_heat_temp.state && tempOutdoor > lowerTempThreshold)
					sendCommand(ac_set_temp, ac_heat_temp.state.toString)
				else if (tempOutdoor <= lowerTempThreshold )
					sendCommand(ac_set_temp, (new Double(ac_heat_temp.state.toString) + additionalDegrees).toString())
			} else if (mode.state == 1) { //NIGHT
				if (ac_night_temp.state !== null && ac_night_temp.state != ac_heat_temp.state)
					sendCommand(ac_set_temp, ac_night_temp.state.toString)
				if (tempOutdoor <= lowerTempThreshold)
					sendCommand(ac_set_temp, (new Double(ac_night_temp.state.toString) + additionalDegrees).toString())
			} else { //AWAY
				if (ac_night_temp.state !== null && ac_night_temp.state != ac_heat_temp.state)
					sendCommand(ac_set_temp, ac_night_temp.state.toString)
					else if (tempOutdoor <= lowerTempThreshold)
					sendCommand(ac_set_temp, (new Double(ac_night_temp.state.toString) + additionalDegrees).toString())
			}

			if (tempOutdoor < lowerTempThreshold && mode.state == 0) {
				ac_mode.sendCommand(5) // TURBO MODE
			} else {
				// Set to Off if tv is off, otherwise to QUIET
				if (tv_power.state == OFF || ac_mode.state != 0)
					ac_mode.sendCommand(0)
				else if (tv_power.state == ON && ac_mode.state != 1)
					ac_mode.sendCommand(1) // QUIET
			}

		}
		case 2: { // COOLING
			if (ac_power.state == OFF)
				ac_power.sendCommand(ON)

			// Set to Off if tv is off, otherwise to QUIET
			if (tv_power.state == OFF && ac_mode.state != 0)
				ac_mode.sendCommand(0)
			else if (tv_power.state == ON && ac_mode.state != 1)
				ac_mode.sendCommand(1) // QUIET

			// Set to cooling if not already set
			if (ac_op_mode.state != 1)
				ac_op_mode.sendCommand(1)

			// set direction to fixed
			if (ac_direction.state != 3)
				ac_direction.sendCommand(3)

			// windlevel
			if (ac_windlevel.state != 0)
				ac_windlevel.sendCommand(0)

			// correct temperature
			if (ac_set_temp.state != ac_cool_temp.state)
				sendCommand(ac_set_temp, ac_cool_temp.state.toString)
		}
		case 3: { // AIR
			if (ac_power.state == OFF)
				ac_power.sendCommand(ON)
			ac_mode.sendCommand(5)

			// Set to wind if not already set
			if (ac_op_mode.state != 3)
				ac_op_mode.sendCommand(3)

			// set direction
			if (ac_direction.state != 2)
				ac_direction.sendCommand(2)

			// windlevel
			if (ac_windlevel.state != 4)
				ac_windlevel.sendCommand(4)

			// correct temperature
			if (ac_set_temp.state != ac_cool_temp.state)
				sendCommand(ac_set_temp, ac_cool_temp.state.toString)
		}
	}
end

rule "AC changed from remote"
	when
		Item ac_power changed or
		Item ac_op_mode changed
	then
	if (ac_power.state == OFF) {
		postUpdate(ac_scene, 0) //OFF
	} else if (ac_op_mode.state == 1) {
		postUpdate(ac_scene, 2) // COOL
	} else if (ac_op_mode.state == 4) {
		postUpdate(ac_scene, 1) // HEAT
	} else if (ac_op_mode.state == 3 || ac_op_mode.state == 4){
		postUpdate(ac_scene, 3)
	}
end

rule "Adjust basement floor heating"
	when
	  Item scene_basement_floor_heating received command
	then
	logInfo(logString, "Adjusting basement floor heating with command: " + receivedCommand)
	switch(receivedCommand) {
		case 0: { // OFF
			tv_room_basement_floor_power_level.sendCommand(0)
			laundry_basement_floor_power_level.sendCommand(0)
			hall_basement_floor_power_level.sendCommand(0)
			sendNotification("{{stein_email}}","Basement floor heating switched off")
		}
		case 1: { // NIGHT/LOW
			sendCommand(tv_room_basement_floor_power_level, floor_night_power_level.state.toString)
			sendCommand(laundry_basement_floor_power_level, floor_night_power_level.state.toString)
			sendCommand(hall_basement_floor_power_level, floor_night_power_level.state.toString)
			//sendNotification("{{stein_email}}","Basement floor heating switched to night mode")
		}
		case 2: { // DAY
			sendCommand(tv_room_basement_floor_power_level, floor_day_power_level.state.toString)
			sendCommand(laundry_basement_floor_power_level, floor_day_power_level.state.toString)
			sendCommand(hall_basement_floor_power_level, floor_day_power_level.state.toString)
			//sendNotification("{{stein_email}}","Basement floor heating switched to day mode")
		}
		case 3: { //HOLIDAY
			sendCommand(tv_room_basement_floor_power_level, floor_holiday_power_level.state.toString)
			sendCommand(laundry_basement_floor_power_level, floor_holiday_power_level.state.toString)
			sendCommand(hall_basement_floor_power_level, floor_holiday_power_level.state.toString)
			sendNotification("{{stein_email}}","Basement floor heating switched to holiday mode")
		}
	}
end

rule "Set timer for floor heating"
when
	Time cron "0 0 1 * * ?" or
	Item basementFloorWeekdaysON changed or
	Item basementFloorWeekdaysOFF changed or
	Item basementFloorWeekendON changed or
	Item basementFloorWeekendOFF changed
then
  var int hours = (basementFloorWeekendON.state as DecimalType).intValue()
	var DateTime onTime = now.withTime(hours, 0, 0, 0)

	if (onTime.beforeNow) onTime = onTime.plusDays(1)
	logInfo(logString, "Scheduling basement floor ON (weekend) for: " + onTime)
	if (timerBFWeekendOn !== null) timerBFWeekendOn.cancel()
	timerBFWeekendOn = createTimer(onTime) [|
		logInfo(logString, "timerBFWeekendOn is running, " + now.getDayOfWeek)
		if (scene_basement_floor_heating.state == 0) {
			logInfo(logString, "Basement floor heating is OFF, doing nothing")
		} else if (holiday_mode.state == OFF && now.getDayOfWeek > 5 && now.getDayOfWeek <= 7) {
			// Only do this if not HOLIDAY and only on weekdays
			scene_basement_floor_heating.sendCommand(2) // DAY MODE
		}
	]

  	hours = (basementFloorWeekendOFF.state as DecimalType).intValue()
	onTime = now.withTime(hours, 0, 0, 0)

	if (onTime.beforeNow) onTime = onTime.plusDays(1)
	logInfo(logString, "Scheduling basement floor OFF (weekend) for: " + onTime)
	if (timerBFWeekendOff !== null) timerBFWeekendOff.cancel()
	timerBFWeekendOff = createTimer(onTime) [|
	  logInfo(logString, "timerBFWeekendOff is running, " + now.getDayOfWeek)
		// Only do this if not HOLIDAY and only on weekdays
		if (scene_basement_floor_heating.state == 0) {
			logInfo(logString, "Basement floor heating is OFF, doing nothing")
		} else if (holiday_mode.state == OFF && now.getDayOfWeek > 4 && now.getDayOfWeek < 7) {
			scene_basement_floor_heating.sendCommand(1) // NIGHT MODE
		}
	]

	// basement floor weekdays NIGHT MODE
  hours = (basementFloorWeekdaysOFF.state as DecimalType).intValue()
	onTime = now.withTime(hours, 0, 0, 0)

	if (onTime.beforeNow) onTime = onTime.plusDays(1)
	logInfo(logString, "Scheduling basement floor OFF for: " + onTime)
	if (timerBFWeekdaysOff !== null) timerBFWeekdaysOff.cancel()
	timerBFWeekdaysOff = createTimer(onTime) [|
		logInfo(logString, "timerBFWeekdaysOff is running, " + now.getDayOfWeek)
		// Only do this if not HOLIDAY and only on weekdays
		if (scene_basement_floor_heating.state == 0) {
			logInfo(logString, "Basement floor heating is OFF, doing nothing")
		} else if (holiday_mode.state == OFF && (now.getDayOfWeek < 5 || now.getDayOfWeek > 6)) {
			scene_basement_floor_heating.sendCommand(1) // NIGHT MODE
		}
	]

	// basement floor weekdays DAY MODE
  hours = (basementFloorWeekdaysON.state as DecimalType).intValue()
	onTime = now.withTime(hours, 0, 0, 0)

	if (onTime.beforeNow) onTime = onTime.plusDays(1)
	logInfo(logString, "Scheduling basement floor ON for: " + onTime)
	if (timerBFWeekdaysOn !== null) timerBFWeekdaysOn.cancel()
	timerBFWeekdaysOn = createTimer(onTime) [|
	  logInfo(logString, "timerBFWeekdaysOn is running, " + now.getDayOfWeek)
		// Only do this if not HOLIDAY and only on weekdays
		if (scene_basement_floor_heating.state == 0) {
			logInfo(logString, "Basement floor heating is OFF, doing nothing")
		} else if (holiday_mode.state == OFF && (now.getDayOfWeek < 6)) {
			scene_basement_floor_heating.sendCommand(2) // DAY MODE
		}
	]
end

rule "Setting holiday mode"
when
	Item holiday_mode received command
then
	switch(receivedCommand) {
		case ON: {
			if (scene_basement_floor_heating.state > 0)
				scene_basement_floor_heating.sendCommand(3)
			if (hall_gf_floor_power_level.state > 0 && hall_gf_floor_power_level.state != floor_holiday_power_level.state)
				sendCommand(hall_gf_floor_power_level, floor_holiday_power_level.state.toString)
			if (bathroom_gf_floor_power_level.state > 0 && bathroom_gf_floor_power_level.state != floor_holiday_power_level.state)
				sendCommand(bathroom_gf_floor_power_level, floor_holiday_power_level.state.toString)
			if (ac_scene.state == 1) {
				if (ac_night_temp.state !== null && ac_night_temp.state != ac_set_temp.state)
					sendCommand(ac_set_temp, ac_night_temp.state.toString)
			} else if(ac_scene.state != 0) { // switch of air conditioner if not heating
				ac_scene.sendCommand(0)
			}
			if (!bathroom_1st_floor_mode.state.toString.equalsIgnoreCase('OFF'))
				sendCommand(bathroom_1st_floor_mode, 'ECO') //ECO MODE

			screen_pi.sendCommand(OFF)
			washingmachine.sendCommand(OFF)
		}
		case OFF: {
			if (scene_basement_floor_heating.state > 0)
				scene_basement_floor_heating.sendCommand(2)
			if (hall_gf_floor_power_level.state > 0 && hall_gf_floor_power_level.state != floor_day_power_level.state)
				sendCommand(hall_gf_floor_power_level, floor_day_power_level.state.toString)
			if (bathroom_gf_floor_power_level.state > 0 && bathroom_gf_floor_power_level.state != floor_day_power_level.state)
				sendCommand(bathroom_gf_floor_power_level, floor_day_power_level.state.toString)
			if (bathroom_1st_floor_mode.state.toString.equalsIgnoreCase('ECO'))
				sendCommand(bathroom_1st_floor_mode, 'HEATING') //HEATING MODE
			if (ac_scene.state == 1) {
				if (ac_heat_temp.state !== null && ac_heat_temp.state != ac_set_temp.state)
					sendCommand(ac_set_temp, ac_heat_temp.state.toString)
			}
			if (screen_pi.state == ON)
				screen_pi_screen.sendCommand(ON)
			else
				sendNotification("{{stein_email}}",'ScreenPi is switched off...')
		}
	}
end

rule "Set timer for bathroom floor heating"
when
	Time cron "0 0 1 * * ?" or
	Item BathroomGFHeatedTo changed or
	Item BathroomGFHeatedFrom changed
then
	var int hours = (BathroomGFHeatedFrom.state as DecimalType).intValue()
	var DateTime onTime = now.withTime(hours, 0, 0, 0)

	if (onTime.beforeNow) onTime = onTime.plusDays(1)
	logInfo(logString, "BathroomGF Scheduling floor ON for: " + onTime)
	
	if (timerBathroomGFOn !== null) timerBathroomGFOn.cancel()
	timerBathroomGFOn = createTimer(onTime) [|
	  	logInfo(logString, "timerBathroomGFOn is doing nothing..")
	  	sendNotification("{{stein_email}}","BathroomGF should be " + BathroomGFTargetTemperature.state + ", it is:" + BathroomGFTemperature.state)
		// If not holiday_mode and heating is switched on and temperature is lower than target temperature
	]
	
	var int hoursOff = (BathroomGFHeatedTo.state as DecimalType).intValue()
	var DateTime offTime = now.withTime(hoursOff, 0, 0, 0)

	if (offTime.beforeNow) {
		BathroomGF_OpState.sendCommand(1) //STANDBY
		offTime = offTime.plusDays(1)
	} 
	logInfo(logString, "BathroomGF Scheduling floor OFF for: " + offTime)
	if (timerBathroomGFOff !== null) timerBathroomGFOff.cancel()
	timerBathroomGFOff = createTimer(offTime) [|
	  	logInfo(logString, "timerBathroomGFOff is turning heating off")
		BathroomGF_OpState.sendCommand(1) //STANDBY 
	]
	
	postUpdate(BathroomGF_recalc, "" + now)
end

rule "Bathroom ground floor heating mode"
when
	Item BathroomGF_OpState received command
then
	if (BathroomGFStandbyPowerLevel.state ==  UNDEF || BathroomGFStandbyPowerLevel === null) {
		postUpdate(BathroomGFStandbyPowerLevel, 2)
		logInfo(logString, "BathroomGF Standby Power level was not set, set to 1")
	}
	
	if (BathroomGF_OpState_previous.state != BathroomGF_OpState.state) {
		logInfo(logString, "BathroomGF_OpState received command " + receivedCommand)
		switch (receivedCommand) {
			case 0: {
				bathroom_gf_floor_power_level.sendCommand(0)
			}
			case 1: {
				sendCommand(bathroom_gf_floor_power_level, BathroomGFStandbyPowerLevel.state as Number)
			}
			case 2: {
				bathroom_gf_floor_power_level.sendCommand(9)
			}
		}
		postUpdate(BathroomGF_OpState_previous, BathroomGF_OpState.state)
	}
end

rule "Recheck when something changes" 
when
	Item BathroomGFStandbyPowerLevel changed or
	Item BathroomGFTargetTemperature changed
then
	logInfo(logString, "BathroomGF recalc because standby power or target temp has changed")
	postUpdate(BathroomGF_recalc, "" + now)
end

rule "Bathroom ground floor temperature changed"
when
	Item BathroomGFTemperature changed
then
	logInfo(logString, "BathroomGF ground floor temperature changed to: " + BathroomGFTemperature.state)
	postUpdate(BathroomGF_recalc, "" + now)
end

rule "Bathroom ground floor temperature recevied update" 
when
	Item BathroomGFTemperature received update
then
	logInfo(logString, "BathroomGF ground floor temperature received update: " + BathroomGFTemperature.state)
	postUpdate(BathroomGFTemperature_LastUpdate, now.toString())
	
	// A timer to make sure that we turn of the heating if no temperature update in the last 2 hours
	if (timerBathroomGFHeating === null) {
		timerBathroomGFHeating = createTimer(now.plusHours(2)) [|
	  		logInfo(logString, "BathroomGF timer is executed, " + now.getDayOfWeek)
	  		BathroomGF_OpState.sendCommand(1) //STANDBY
	  		sendNotification("{{stein_email}}","No temperature update in the last two hours, so we've stopped heating the ground floor bathroom")
		]
		logInfo(logString, "BathroomGF  timer created")		
	} else {
		if (timerBathroomGFHeating.isRunning()) {
			timerBathroomGFHeating.cancel()
		}
		timerBathroomGFHeating.reschedule(now.plusHours(2))
		logInfo(logString, "BathroomGF timer is set to now plus 2 hours")
	}
end

rule "BathroomGF calculate what to do" 
	when
		Item BathroomGF_recalc received update
then
	logInfo(logString, "BathroomGF_recalc received update.. checking")
	
	if (BathroomGFHeatedFrom.state == UNDEF || BathroomGFHeatedFrom.state === null) {
		postUpdate(BathroomGFHeatedFrom, 16)
		logInfo(logString, "BathroomGF Heated from was not defined, set to 16")
	}
	if (BathroomGFHeatedTo.state == UNDEF || BathroomGFHeatedTo.state === null) {
		postUpdate(BathroomGFHeatedTo, 20)
		logInfo(logString, "BathroomGF Heated to was not defined, set to 20")
	}
	if (BathroomGFTargetTemperature.state == UNDEF || BathroomGFTargetTemperature === null) {
		postUpdate(BathroomGFTargetTemperature, 25)
		logInfo(logString, "BathroomGF target temp was not set, changed to 25")
	}
		
	val heatingStart = now.toLocalDate.toDateTimeAtStartOfDay.withHourOfDay((BathroomGFHeatedFrom.state as DecimalType).intValue())
	val heatingEnd = now.toLocalDate.toDateTimeAtStartOfDay.withHourOfDay((BathroomGFHeatedTo.state as DecimalType).intValue())
	val tempDiff = (BathroomGFTemperature.state as DecimalType).intValue() - (BathroomGFTargetTemperature.state as DecimalType).intValue()
	logInfo(logString, "BathroomGF tempDiff is: " + tempDiff)
	
	if (holiday_mode.state == ON && BathroomGF_OpState.state > 1) {
		BathroomGF_OpState.sendCommand(1) //STANDBY
	} else if (BathroomGF_OpState.state == 0) {
		// DO NOTHING...
	} else if (tempDiff >= 0 || now.isAfter(heatingEnd)) { // It is warm enough...or we do not need to heat any more
		BathroomGF_OpState.sendCommand(1) //STANDBY
	} else if (now.isAfter(heatingStart) && now.isBefore(heatingEnd) && tempDiff < 0) {
		logInfo(logString, "BathroomGF Heating is ongoing and temp is lower than target temp")
		if (!now.plusMinutes(30).isAfter(heatingEnd)) {
			logInfo(logString, "BathroomGF More than 30 minutes to heating turns of so we will change power level")
			BathroomGF_OpState.sendCommand(2) //HEATING
		}
	} else if(now.isBefore(heatingStart) && tempDiff < 0) {
		var Duration d = new Duration(now, heatingStart)
		var untilStart = d.standardHours
		logInfo(logString, "BathroomGF There is " + untilStart + " hours until room should be heated")
		if (untilStart <= (tempDiff*-1)) {
			logInfo(logString, "BathroomGF We'll start heating because there is " + untilStart + " hours until start and the tempdiff is: " + (tempDiff*-1))
			BathroomGF_OpState.sendCommand(2) //HEATING
		}
	} 
end

rule "Make sure standby mode changes the heating power"
 	when
 		Time cron "0 0/20 * * * ?"
 	then
 		if (BathroomGF_OpState.state == 0 && bathroom_gf_floor_power_level.state != 0) {
			bathroom_gf_floor_power_level.sendCommand(0)	
			logInfo(logString, "Should be off, but was not")
		 } else if (BathroomGF_OpState.state == 1 && bathroom_gf_floor_power_level.state != BathroomGFStandbyPowerLevel.state) {
			sendCommand(bathroom_gf_floor_power_level, BathroomGFStandbyPowerLevel.state as Number)
			logInfo(logString, "Standby-mode was using power")
			sendNotification("{{stein_email}}","Har justert standby-modus til riktig nivå")
		 } else if (BathroomGF_OpState.state == 2 && bathroom_gf_floor_power_level.state != 9) {
			bathroom_gf_floor_power_level.sendCommand(9)
			logInfo(logString, "Was not heating with correct power, updating")
		 }
end

rule "Make sure the z-wave-api has the configuration values"
	when
		Time cron "0 0/40 * * * ?"
	then
	var String htp = "http://{{zwave_ip}}:8083/ZWaveAPI/Run/devices%5B23%5D.Configuration.Get(12)"
	sendHttpGetRequest(htp)
	htp = "http://{{zwave_ip}}:8083/ZWaveAPI/Run/devices%5B24%5D.Configuration.Get(12)"
	sendHttpGetRequest(htp)
	htp = "http://{{zwave_ip}}:8083/ZWaveAPI/Run/devices%5B25%5D.Configuration.Get(12)"
	sendHttpGetRequest(htp)
	htp = "http://{{zwave_ip}}:8083/ZWaveAPI/Run/devices%5B26%5D.Configuration.Get(12)"
	sendHttpGetRequest(htp)
	htp = "http://{{zwave_ip}}:8083/ZWaveAPI/Run/devices%5B27%5D.Configuration.Get(12)"
	sendHttpGetRequest(htp)
	htp = "http://{{zwave_ip}}:8083/ZWaveAPI/Run/devices%5B28%5D.Configuration.Get(12)"
	sendHttpGetRequest(htp)
end

rule "Changing floor mode on 1st floor bathroom"
when
	Item bathroom_1st_floor_mode received command
then
	var String htp = "http://{{zwave_ip}}:8083/ZWaveAPI/Run/devices%5B24%5D.ThermostatMode.Set("+ receivedCommand.toString + ")"
	logInfo(logString, "Sending request to set thermostat to : " + receivedCommand.toString + " , like this: [" + htp + "]")
	sendHttpGetRequest(htp)
end
