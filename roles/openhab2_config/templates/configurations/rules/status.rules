import org.eclipse.smarthome.core.library.types.DecimalType

rule "Startup"
	when
		System started
	then
	logInfo("org.openhab.rules", "System started")
	sendCommand(alarm_check, "" + now)
end

rule "When text is changed, send a push message"
	when
		Item push_message_text received update
	then
		logInfo('org.openhab.rules.status', 'push_message_text is: ' + push_message_text.state + ' , with url: ' + push_message_url.state)
		try {
			callScript('pushMessages')
		} catch (Exception e) {
			logError("org.openhab.rules.status", "Exception was thrown when trying to send pushMessage : " + e.message)
			sendNotification("{{stein_email}}",'Could not send push message: ' + push_message_text.state.toString)
		}
end

// Creates an item that stores the last update time of this item
rule "Records last outdoor update time"
when
  Item OutdoorTemperature received update
then
  postUpdate(OutdoorTemperature_LastUpdate, now.toString())
end

rule "Records last office temperature update time"
when
  Item OfficeTemperature received update
then
  postUpdate(OfficeTemperature_LastUpdate, now.toString())
end

rule "Records last basement temperature update time"
when
  Item BasementTemperature received update
then
  postUpdate(BasementTemperature_LastUpdate, now.toString())
end

rule "Records last living room temperature update time"
when
  Item LivingRoomTemperature received update
then
  postUpdate(LivingRoomTemperature_LastUpdate, now.toString())
end

/**
 * This rule will be used to test Scale transformation service
 */
rule "Compute humidex"
when Item OutdoorTemperature changed or
	 Item OutdoorHumidity changed
then
	var Number T = OutdoorTemperature.state as DecimalType
	var Number H = OutdoorHumidity.state as DecimalType
	var Number x = 7.5 * T/(237.7 + T)
	var Number e = 6.112 * Math::pow(10, x.doubleValue) * H/100
	var Number humidex = T + (new Double(5) / new Double(9)) * (e - 10)
	Outdoor_Humidex.postUpdate(humidex)
end

rule "Update max and min temperatures"
when
	Item OutdoorTemperature changed or
	Time cron "0 0 0 * * ?" or
	System started
then
	postUpdate(Outdoor_Temp_Max, OutdoorTemperature.maximumSince(now.toLocalDate.toDateTimeAtStartOfDay).state)
	postUpdate(Outdoor_Temp_Min, OutdoorTemperature.minimumSince(now.toLocalDate.toDateTimeAtStartOfDay).state)
	//logInfo("Weather","Temperature evolved of " + OutdoorTemperature.deltaSince(now.minusMinutes(2)).toString + " degrees.")
end

rule "Record last update received from Samsung Air Conditioner"
when
 	Item ac_current_temp received update
then
	postUpdate(ac_lastUpdate, now.toString())
end

rule "Set TV to same state as LAN-checking, and set Air Conditioner to QUIET-mode if TV is being switched on"
when
	Item tv_power changed
then
	logInfo('org.openhab.rules.status', "TV power changed to: " + tv_power.state)
	if (tv_power.state == ON && ac_mode.state != 1 && ac_power.state == ON && (mode.state == 0 || mode.state == 3)) {
		var double tempOutdoor = new Double(OutdoorTemperature.state.toString())
		var double quietThreshold = new Double(AC_quiet_temp_threshold.state.toString())
		if (!(ac_scene.state == 1 && tempOutdoor < quietThreshold)) {
			ac_mode_previous.sendCommand(ac_mode.state.toString)
			ac_mode.sendCommand(1)
		}
	} else if (tv_power.state == OFF && ac_mode_previous.state.toString != "99" && ac_mode.state != ac_mode_previous.state && ac_power.state == ON) {
		ac_mode.sendCommand(ac_mode_previous.state.toString)
		ac_mode_previous.sendCommand(99)
	}
	postUpdate(homekit_tv, tv_power.state)
end

rule "If we manually change to quiet mode when the tv is on"
when
	Item ac_mode changed
then
	logInfo('org.openhab.rules.status', "Someone changed the ac_mode to: " + ac_mode.state)
	if (tv_power.state == ON && (ac_mode_previous.state === null || ac_mode_previous.state.toString() == '99')) {
		ac_mode_previous.sendCommand(ac_mode.previousState(true).state.toString())
	}
end

rule "Send a status message at 22 if anything is NOT ok"
	when
		Time cron "0 0 22 ? * *"
	then
		logInfo('org.openhab.rules.status', "Checking if everything is ok")
		if (garage_door_1.state == ON || garage_door_2.state == ON) {
			postUpdate(push_message_text, "Venstre: " + garage_door_1.state.toString() + ", Høyre:" + garage_door_2.state.toString())
		}
		if (boss_lan.state == OFF && !boss_lan.changedSince(now.minusHours(12))) {
			sendNotification("{{stein_email}}",'Boss is not responding, and has been off for 12 hours (' + boss_lan.lastUpdate.toString + ')')
		}
		if (mode.state != 0 && mode.state != 3 && tv_power.state == ON) {
			postUpdate(push_message_text, 'TV-en står på, men du har enten lagt deg eller er borte..')
		}

		if (!zWaveStatus.state.toString().equalsIgnoreCase("200 OK")) {
			sendNotification("{{stein_email}}",'Z-Wave status er: ' + zWaveStatus.state.toString())
		}
end

rule "Battery level changed"
when
	Item gBatteryLevel_100 changed
then
	logInfo('org.openhab.rules.status', "BatteryLevel changed, gBatteryLevel_100: " + gBatteryLevel_100.state)

	if (gBatteryLevel_100.state <= 20) {
		gBatteryLevel_100?.members.forEach [item |
			if (item.state <= 20 && mode.state == 0) {
				sendNotification("{{stein_email}}",''+ item.name + ' har lavt batterinivå: ' + item.state.toString + '%')
			}
		]
	}
end

rule "Luminance Hall GF changed"
when
	Item hall_gf_luminance changed
	then
		logInfo('org.openhab.rules.status', "Item hall_gf_luminance changed " + hall_gf_luminance)
		postUpdate(hall_gf_lux_update, now.toString())
end

rule "Luminance Bathroom 1st floor changed"
when
	Item bathroom_lux changed
then
	logInfo('org.openhab.rules.status', "Item bathroom_lux changed: " + bathroom_lux.state)
	postUpdate(bathroom_lux_update, now.toString())
end

rule "Switch ON or OFF the screen in the hall way"
	when
		Item screen_pi_screen received command
	then
	logInfo('org.openhab.rules.status.screenpi', "Item screen_pi_screen received command: " + receivedCommand)
	var String result = null
	if (screen_pi.state == ON) {
		switch (receivedCommand) {
			case ON: {
				result = executeCommandLine("ssh@@pi@{{screenpi_ip}}@@xscreensaver-command -deactivate", 5000)
				logInfo('org.openhab.rules.status.screenpi', "Result from deactivate: " + result)
			}
			case OFF: {
				result = executeCommandLine("ssh@@pi@{{screenpi_ip}}@@xscreensaver-command -activate", 5000)
				logInfo('org.openhab.rules.status.screenpi', "Result from active: " + result)
			}
		}
	} else {
		logInfo('org.openhab.status.screenpi', 'ScreenPi is offline, so no request sent')
	}
	postUpdate(screen_pi_screen, OFF)
	if (result !== null && result.length() > 0)
		logInfo("org.openhab.status.screenpi", result)
end

rule "Switch OFF the computer in the hallway"
	when
		Item screen_pi received command OFF
	then
	logInfo('org.openhab.rules.status.shutdown', "Item screen_pi received command OFF")
	val result = executeCommandLine("ssh@@pi@{{screenpi_ip}}@@pkill chromium;sleep 5;sudo shutdown -h now", 5000)
	if (result !== null && result.length() > 0)
		logInfo("org.openhab.status.shutdown", result)
end

rule "Reboot computer in the hallway"
	when
		Item screen_pi_reboot received command ON
	then
	logInfo('org.openhab.rules.status.reboot', "Item screen_pi_reboot received command ON")
	val result = executeCommandLine("ssh@@pi@{{screenpi_ip}}@@pkill chromium;sleep 5;sudo shutdown -r now", 5000)
	if (result !== null && result.length() > 0)
		logInfo("org.openhab.status.reboot", result)
end

rule "Z-wave api status changes"
	when
		Item zWaveStatus changed
	then
	logInfo("org.openhab.rules.status", "Z-Wave status changed to: " + zWaveStatus)
end
