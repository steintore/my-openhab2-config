import java.util.concurrent.locks.ReentrantLock
import org.eclipse.smarthome.model.script.actions.Timer

val String MODE_OFF = 0
val String MODE_STANDBY = 1
val String MODE_ACTIVE = 2
val String MODE_FINISHED = 3
var ReentrantLock finishLock  = new ReentrantLock()
var ReentrantLock finishLockDryer  = new ReentrantLock()

var Timer timerDryer = null

rule "Washingmachine Consumption State Machine (Extended)"
when
    Item power_washingmachine changed
then
  logDebug('org.openhab.rules.household', 'Washing machine changed to: ' + power_washingmachine.state)
    if (power_washingmachine.state < 0.3)
      washingmachine_OpState.postUpdate(MODE_OFF)
    else if (power_washingmachine.state > 0.5)
      washingmachine_OpState.postUpdate(MODE_ACTIVE)
    else if (power_washingmachine.state <= 0.5) {
        if (washingmachine_OpState.state == MODE_OFF) washingmachine_OpState.postUpdate(MODE_STANDBY)
        else if (washingmachine_OpState.state == MODE_ACTIVE) {
            finishLock.lock()
            try {
                Thread::sleep(10000) // Debounce for 10 seconds
                if (power_washingmachine.state <= 0.5) washingmachine_OpState.postUpdate(MODE_FINISHED)
            } finally {
                finishLock.unlock()
            }
        }
    }
end

rule "Washingmachine Notifications"
when
    Item washingmachine_OpState changed
then
    if (washingmachine_OpState.state == MODE_FINISHED) {
        postUpdate(push_message_text, "Vaskemaskinen er ferdig!")
        if (mode.state == 1 || mode.state == 2) // Cut power if AWAY or NIGHT
          sendCommand(washingmachine, OFF)
    }
end

rule "Dryer Consumption State Machine (Extended)"
when
    Item power_dryer changed
then
    logDebug('org.openhab.rules.household', 'Dryer changed to: ' + power_dryer.state)
    if (power_dryer.state <= 0.5)
      dryer_OpState.postUpdate(MODE_OFF)
    else if (power_dryer.state > 2)
      dryer_OpState.postUpdate(MODE_ACTIVE)
    else if (power_dryer.state <= 2) {
        if (dryer_OpState.state == MODE_OFF) dryer_OpState.postUpdate(MODE_STANDBY)
        else if (dryer_OpState.state == MODE_ACTIVE) {
            finishLockDryer.lock()
            try {
                Thread::sleep(10000) // Debounce for 10 seconds
                if (power_dryer.state <= 2) dryer_OpState.postUpdate(MODE_FINISHED)
            } finally {
                finishLockDryer.unlock()
            }
        }
    }
end

rule "Dryer Notifications"
when
    Item dryer_OpState changed
then
    if (dryer_OpState.state == MODE_FINISHED) {
        postUpdate(push_message_text, "Tørketrommelen er ferdig!")
        if (mode.state == 1 || mode.state == 2) // Cut power if AWAY or NIGHT
          sendCommand(dryer, OFF)
    }
end

rule "Freezer is suddenly using less power"
when
	Item power_freezer changed
then
	var double w = new Double(power_freezer.state.toString())
	var double maxLastHour = new Double(power_freezer.maximumSince(now.minusHours(1)).state.toString())
	if (w < 5 || (w < 70 && maxLastHour < 70 )) {
		logInfo('org.openhab.rules.household', "Sending message about freezer because: (" + w + " < 5 || (" + w + " < 70 && " + maxLastHour + "< 70 ))")
		sendNotification("{{stein_email}}","Fryseren drar plutselig mindre strøm enn vanlig, nå kun: " + w + " watt og maks siste time er: " + maxLastHour)
	}
end

rule "Water sensor alarm"
when
	Item flood_sensor_kitchen_alarm received command
then
	switch (receivedCommand) {
		case ON:
			{
				postUpdate(push_message_text, "Vannsensor under vasken på kjøkkenet har blitt utløst, sjekk det med en gang!")
			}
		case OFF:
			{
				postUpdate(push_message_text, "Vannsensor under vasken på kjøkkenet piper ikke lenger, men sjekk den uansett!")
			}
	}
	
end