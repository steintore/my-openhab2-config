import org.joda.time.DateTime
import org.joda.time.DateTimeConstants

rule "Log in to smappee every 20 minutes"
 	when
 		Time cron "0 0/20 * * * ?"
 	then
 		var String htp = "http://{{smappee_ip}}/gateway/apipublic/logon"
		var String result = sendHttpPostRequest(htp, "application/json", "admin")
		logInfo("org.openhab.rules.power", "Logged into Smappee with result: " + result)
end

rule "Updated power"
	when
		Item smappee_power_phase1 changed or
		Item smappee_power_phase2 changed or
		Item smappee_power_phase3 changed
	then
	var Double one = new Double(smappee_power_phase1.state.toString())
	var Double two = new Double(smappee_power_phase2.state.toString())
	var Double three = new Double(smappee_power_phase3.state.toString())
	var Double total = (one + two + three) 

	postUpdate(smappee_power, total)
	postUpdate(smappee_kwh, total*0.000017)
	if(smappee_power !== null) {
		val startOfDay = now.toLocalDate.toDateTimeAtStartOfDay
        postUpdate(smappee_power_max, smappee_power.maximumSince(startOfDay).state)
        postUpdate(smappee_power_min, smappee_power.minimumSince(startOfDay).state)
    }
end

rule "Smappee kWh changed"
	when
		Item smappee_kwh changed
	then
	var DateTime lastUpdate = now
	if (smappee_kwh_lastupdate.state != UNDEF && smappee_kwh_lastupdate.state !== null && smappee_kwh_lastupdate.state !== NULL) {
		lastUpdate = new DateTime((smappee_kwh_lastupdate.state as DateTimeType).calendar.timeInMillis)
		logDebug("org.openhab.rules.power", "Item smappee_kwh changed " + smappee_kwh_lastupdate.state.toString())
	}
	
	var kwh = new Double(smappee_kwh.state.toString())
	var DateTime startOfDay = now.toLocalDate.toDateTimeAtStartOfDay
	if (smappee_total_today.state == NULL) postUpdate(smappee_total_today, 0)
	if (smappee_total_yesterday.state == NULL) postUpdate(smappee_total_yesterday, 0)
	if (smappee_total_week.state == NULL) postUpdate(smappee_total_week, 0)
	if (smappee_total_month.state == NULL) postUpdate(smappee_total_month, 0)
	if (smappee_total_year.state == NULL) postUpdate(smappee_total_year, 0)
	
	// TODAY
	if (lastUpdate.isBefore(startOfDay)) {
		postUpdate(smappee_total_yesterday, new Double(smappee_total_today.state.toString()))
		postUpdate(smappee_total_today, kwh)
	} else {
		var Double today = new Double(smappee_total_today.state.toString())
		postUpdate(smappee_total_today, kwh + today)
	}
	
	// WEEK
	if (lastUpdate.isBefore(startOfDay.withDayOfWeek(DateTimeConstants.MONDAY))) {
		postUpdate(smappee_total_week, kwh)
	} else {
		var Double week = new Double(smappee_total_week.state.toString())
		postUpdate(smappee_total_week, kwh + week)
	}
	
	// MONTH
	if (lastUpdate.isBefore(startOfDay.withDayOfMonth(1))) {
		postUpdate(smappee_total_month, kwh)
	} else {
		var Double month = new Double(smappee_total_month.state.toString())
		postUpdate(smappee_total_month, kwh + month)
	}
	
	// YEAR
	if (lastUpdate.isBefore(startOfDay.withDayOfYear(1))) {
		postUpdate(smappee_total_year, kwh)
	} else {
		var Double year = new Double(smappee_total_year.state.toString())
		postUpdate(smappee_total_year, kwh + year)
	}
	
	postUpdate(smappee_kwh_lastupdate, now.toString())
end

rule "Updated ampere"
	when
		Item smappee_ampere_phase1 changed or
		Item smappee_ampere_phase2 changed or
		Item smappee_ampere_phase3 changed
	then
	var Double one = new Double(smappee_ampere_phase1.state.toString())
	var Double two = new Double(smappee_ampere_phase2.state.toString())
	var Double three = new Double(smappee_ampere_phase3.state.toString())
	var Double total = (one + two + three) 

	postUpdate(smappee_ampere, total)
end

rule "Updated cosfi"
	when
		Item smappee_cosfi_phase1 changed or
		Item smappee_cosfi_phase2 changed or
		Item smappee_cosfi_phase3 changed
	then
	var Double one = new Double(smappee_cosfi_phase1.state.toString())
	var Double two = new Double(smappee_cosfi_phase2.state.toString())
	var Double three = new Double(smappee_cosfi_phase3.state.toString())
	var Double total = (one + two + three) 

	postUpdate(smappee_cosfi, total)
end

rule "Updated peak"
	when
		Item smappee_peak_phase1 changed or
		Item smappee_peak_phase2 changed or
		Item smappee_peak_phase3 changed
	then
	var Double one = new Double(smappee_peak_phase1.state.toString())
	var Double two = new Double(smappee_peak_phase2.state.toString())
	var Double three = new Double(smappee_peak_phase3.state.toString())
	var Double total = (one + two + three) 

	postUpdate(smappee_peak, total)
end