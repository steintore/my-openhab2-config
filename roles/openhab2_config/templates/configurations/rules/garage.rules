var Timer garageDoorOpenLeaf = null
var Timer garageDoorOpenMondeo = null

var Timer garageDoorOpen1Timed = null
var Timer garageDoorOpen2Timed = null

var Timer garagePiTimer = null

var Boolean isGarageMessageSent = false

rule "Send a message if garage door LEAF has been open for 15 minutes"
	when
		Item garage_door_1 changed to ON	
	then
		logInfo("org.openhab.rules","LEAF Garage door opened")
		sendCommand(message_received, OFF)
		postUpdate(scene_garage_1, 1)
		garageDoorOpenLeaf = createTimer(now.plusSeconds(900)) [|
			if (garage_door_1.state == OFF) {
				if(garageDoorOpenLeaf !== null) {
					if(garageDoorOpenLeaf.running) {
						garageDoorOpenLeaf.cancel()
					}
					garageDoorOpenLeaf = null
				}	
			} else {
				var t = "Høyre garasjeport er ikke lukket"
				logInfo("org.openhab.rules", t)
				if (message_received.state == OFF) { 
					postUpdate(push_message_text, t)
					isGarageMessageSent = true
				}
				habPanel_hallway.postUpdate("Garasjen")
				screen_pi_screen.sendCommand(ON)
				garageDoorOpenLeaf.reschedule(now.plusSeconds(1200))
			}			
		]
	habPanel_hallway.postUpdate("Garasjen")
	screen_pi_screen.sendCommand(ON)
end

rule "Send a message if garage door MONDEO has been open for 15 minutes"
	when
		Item garage_door_2 changed to ON	
	then
		logInfo("org.openhab.rules","MONDEO Garage door opened")
		sendCommand(message_received, OFF)
		postUpdate(scene_garage_2, 1)
		garageDoorOpenMondeo = createTimer(now.plusSeconds(900)) [|
			if (garage_door_2.state == OFF) {
				if(garageDoorOpenMondeo !== null) {
					if(garageDoorOpenMondeo.running) {
						garageDoorOpenMondeo.cancel()
					}
					garageDoorOpenMondeo = null
				}	
			} else {
				var t = "Venstre garasjeport er ikke lukket"
				logInfo("org.openhab.rules", t)
				if (message_received.state == OFF) { 
					postUpdate(push_message_text, t)
					isGarageMessageSent = true
				}
				habPanel_hallway.postUpdate("Garasjen")
				screen_pi_screen.sendCommand(ON)
				garageDoorOpenMondeo.reschedule(now.plusSeconds(1200))
			}			
		]
		habPanel_hallway.postUpdate("Garasjen")
		screen_pi_screen.sendCommand(ON)
end

rule "Reset timer if someone closes the garage door, and both is closed"
	when
		Item garage_door_1 changed to OFF or
		Item garage_door_2 changed to OFF
	then
		logInfo("org.openhab.rules", "Garage door closed")
		sendCommand(message_received, OFF)
		if (garage_door_1.state == OFF) {
			postUpdate(scene_garage_1, 0)
			if(garageDoorOpenLeaf!== null) {
				garageDoorOpenLeaf.cancel
				garageDoorOpenLeaf = null
			}
		} else {
			postUpdate(scene_garage_1, 1)
			garageDoorOpenLeaf.reschedule(now.plusSeconds(1200))
			habPanel_hallway.postUpdate("Garasjen")
			screen_pi_screen.sendCommand(ON)
		}
		 
		if (garage_door_2.state == OFF) {
			postUpdate(scene_garage_2, 0)
			if(garageDoorOpenMondeo !== null) {
				garageDoorOpenMondeo.cancel()
				garageDoorOpenMondeo = null
			}
		} else {
			postUpdate(scene_garage_2, 1)
			garageDoorOpenMondeo.reschedule(now.plusSeconds(1200))
			habPanel_hallway.postUpdate("Garasjen")
			screen_pi_screen.sendCommand(ON)
		}	
		
		if (garage_door_1.state == OFF && garage_door_2.state == OFF) {
			habPanel_hallway.postUpdate("Hallway")
			if (isGarageMessageSent) {
				postUpdate(push_message_text, "Begge garasjeporter er nå lukket!")
				isGarageMessageSent = false
				screen_pi_screen.sendCommand(ON)
			}
		}
end

rule "Send a message after 7 minutes if garage door is open and nobody is home"
	when
		Time cron "0 0/7 * * * ?"
	then
		if (mode.state == 2 && (garage_door_1.state == ON || garage_door_2.state == ON)) {
			if (message_received.state == OFF && !garage_door_1.changedSince(now.minusMinutes(8)) && !garage_door_2.changedSince(now.minusMinutes(8))) {
				postUpdate(push_message_text, "Tydeligvis ingen hjemme, men garasjeporten er ÅPEN")
				isGarageMessageSent = true
			}
		}
		if (garage_door_1.state === null || garage_door_1.state == NULL) {
        	sendCommand(garage_door_1, OFF)
        	postUpdate(scene_garage_1, 0)
        }
        if (garage_door_2.state === null || garage_door_2.state == NULL) {
        	sendCommand(garage_door_2, OFF)
        	postUpdate(scene_garage_2, 0)
        }	
end

rule "scene for garage door 1"
when
	Item scene_garage_1 received command
then
	logInfo('org.openhab', 'garage door 1 received state:' + scene_garage_1.state)
	switch (receivedCommand) {
		case 0: { // CLOSE
			if (garage_door_1.state == ON) {
				sendCommand(garage_door_1_relay, ON)
				Thread::sleep(500)
				sendCommand(garage_door_1_relay, OFF)
			}
		}
		case 1: { // OPEN
			if (garage_door_1.state == OFF) {
				sendCommand(garage_door_1_relay, ON)
				Thread::sleep(500)
				sendCommand(garage_door_1_relay, OFF)
			}	
		}
		case 2: { // OPEN FOR 10 MINUTES
			if (garage_door_1.state == OFF) {
				sendCommand(garage_door_1_relay, ON)
				Thread::sleep(500)
				sendCommand(garage_door_1_relay, OFF)
				garageDoorOpen1Timed = createTimer(now.plusSeconds(600)) [|
					if (garage_door_1.state == OFF) {
						if(garageDoorOpen1Timed !== null) {
							if(garageDoorOpen1Timed.running) {
								garageDoorOpen1Timed.cancel()
							}
						garageDoorOpen1Timed = null
						}
						sendNotification("{{stein_email}}","Cancelling timer, door 1 is already closed")	
					} else { // SHOULD WE CHECK FOR MOTION?
						sendCommand(scene_garage_1, 0) // CLOSE
						if(garageDoorOpen1Timed !== null) {
							if(garageDoorOpen1Timed.running) {
								garageDoorOpen1Timed.cancel()
							}
						garageDoorOpen1Timed = null
						}
					}			
				]
			} 
		}
	}	
	logInfo('org.openhab', 'scene_garage_1 updated to: ' + scene_garage_1.state)
end

rule "scene for garage door 2"
when
	Item scene_garage_2 received command
then
	logInfo('org.openhab', 'garage door 2 received state:' + scene_garage_2.state)
	switch (receivedCommand) {
		case 0: { // CLOSE
			if (garage_door_2.state == ON) {
				sendCommand(garage_door_2_relay, ON)
				Thread::sleep(500)
				sendCommand(garage_door_2_relay, OFF)
			}
		}
		case 1: { // OPEN
			if (garage_door_2.state == OFF) {
				sendCommand(garage_door_2_relay, ON)
				Thread::sleep(500)
				sendCommand(garage_door_2_relay, OFF)
			}	
		}
		case 2: { // OPEN FOR 10 MINUTES
			if (garage_door_2.state == OFF) {
				sendCommand(garage_door_2_relay, ON)
				Thread::sleep(500)
				sendCommand(garage_door_2_relay, OFF)
				garageDoorOpen2Timed = createTimer(now.plusSeconds(600)) [|
					if (garage_door_2.state == OFF) {
						if(garageDoorOpen2Timed !== null) {
							if(garageDoorOpen2Timed.running) {
								garageDoorOpen2Timed.cancel()
							}
						garageDoorOpen2Timed = null
						}
						sendNotification("{{stein_email}}","Cancelling timer, door 2 is already closed")	
					} else { // SHOULD WE CHECK FOR MOTION?
						sendCommand(scene_garage_2, 0) // CLOSE
						if(garageDoorOpen2Timed !== null) {
							if(garageDoorOpen2Timed.running) {
								garageDoorOpen2Timed.cancel()
							}
						garageDoorOpen2Timed = null
						}
					}			
				]
			}	
		}
	}	
	logInfo('org.openhab', 'scene_garage_2 updated to: ' + scene_garage_2.state)
end

rule "motion in the garage"
when
	Item garagepi_motion changed to ON
then
	sendNotification("{{stein_email}}","Motion in the garage", 0 , "{{garagepi_screenshot_url}}")
	postUpdate(garagepi_motion, OFF)
end

rule "Garagepi is offline or online"
when
	Item garage_pi changed
then
	logInfo('garage.rules', "GaragePi-network state changed to: " + garage_pi.state)
	switch(garage_pi.state as OnOffType) {
		case ON: {
			if (garagePiTimer !== null) {
				if (garagePiTimer.running)
					garagePiTimer.cancel()
			}
			garagePiTimer = null
			logInfo('garage.rules', "GaragePiTimer is now (should always be null): " + garagePiTimer)
		}		
		case OFF: {
			if (garagePiTimer !== null) {
				if (garagePiTimer.running)
					garagePiTimer.cancel()
				garagePiTimer.reschedule(now.plusHours(12))
				logInfo('garage.rules', "GaragePiTimer has been rescheduled to: " + now.plusHours(12))
			} else if (garagePiTimer === null ) {
				logInfo('garage.rules', "creating new GaragePiTimer has scheduled to run at: " + now.plusHours(12) + " - timer is now:" + garagePiTimer)
				garagePiTimer = createTimer(now.plusHours(12)) [|
					logInfo('garage.rules', "GaragePiTimer executing " + garagePiTimer)
					sendNotification("{{stein_email}}", "GaragePi har vært offline siden: " + garage_pi.lastUpdate)
					if (garagePiTimer !== null && garagePiTimer.running)
						garagePiTimer.cancel()
					garagePiTimer = null
					logInfo('garage.rules', 'GarageTimer has been rescheduled to ' + now.plusHours(6))
				]
				}
		}
	}
end
