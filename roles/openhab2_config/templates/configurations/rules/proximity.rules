import org.eclipse.smarthome.model.script.actions.Timer

var Timer timerSteinMobileWlan = null
var Timer timerAMobileWlan = null
var Timer timerIMobileWlan = null
var Timer timerMMobileWlan = null


rule "S Mobile Wlan Proximity Enter"
when
	Item Mobile_s_wlan changed from OFF to ON
then
	if(timerSteinMobileWlan!== null) {
		logInfo("org.openhab.rules","steinwlan ON. stopping timer.")
		timerSteinMobileWlan.cancel()
		timerSteinMobileWlan = null
	}
	sendCommand(stein_home, ON)
end

rule "A Mobile Wlan Proximity Enter"
when
	Item Mobile_a_wlan changed from OFF to ON
then
	if(timerAMobileWlan!== null) {
		timerAMobileWlan.cancel()
		timerAMobileWlan = null
	}
	sendCommand(a_home, ON)
end

rule "I Mobile Wlan Proximity Enter"
when
	Item Mobile_i_wlan changed from OFF to ON
then
	if(timerIMobileWlan!== null) {
		logInfo("org.openhab.rules","I wlan ON. stopping timer.")
		timerIMobileWlan.cancel()
		timerIMobileWlan = null
	}
	sendCommand(i_home, ON)
end

rule "M Mobile Wlan Proximity Enter"
when
	Item Mobile_m_wlan changed from OFF to ON
then
	if(timerMMobileWlan!== null) {
		logInfo("org.openhab.rules","M wlan ON. stopping timer.")
		timerMMobileWlan.cancel()
		timerMMobileWlan = null
	}
	sendCommand(m_home, ON)
end

rule "S Mobile Wlan Proximity Timer Leave"
when
	Item Mobile_s_wlan changed from ON to OFF
then
	logInfo("org.openhab.rules","steinwlan off. starting timer.")
	if( timerSteinMobileWlan==null ) {
		timerSteinMobileWlan = createTimer(now.plusSeconds(2400)) [|
			logInfo("org.openhab.rules", "S mobile timer has timed out. Executing proximity off")
			sendCommand(stein_home, OFF)
			if(timerSteinMobileWlan!== null) {
				if(timerSteinMobileWlan.running) {
					timerSteinMobileWlan.cancel()
				}
				timerSteinMobileWlan = null
			}
		]
	} else {
		timerSteinMobileWlan.reschedule(now.plusSeconds(1200))
	}
end

rule "A Mobile Wlan Proximity Timer Leave"
when
	Item Mobile_a_wlan changed from ON to OFF
then
	logInfo("org.openhab.rules","A wlan off. starting timer.")
	if( timerAMobileWlan==null ) {
		timerAMobileWlan = createTimer(now.plusSeconds(2400)) [|
			logInfo("org.openhab.rules", "A timer has timed out. Executing proximity off")
			sendCommand(a_home, OFF)
			if(timerAMobileWlan!== null) {
				if(timerAMobileWlan.running) {
					timerAMobileWlan.cancel()
				}
				timerAMobileWlan = null
			}
		]
	} else {
		timerAMobileWlan.reschedule(now.plusSeconds(1200))
	}
end

rule "I Mobile Wlan Proximity Timer Leave"
when
	Item Mobile_i_wlan changed from ON to OFF
then
	logInfo("org.openhab.rules","i wlan off. starting timer.")
	if( timerIMobileWlan==null ) {
		timerIMobileWlan = createTimer(now.plusSeconds(2400)) [|
			logInfo("org.openhab.rules", "I mobile timer has timed out. Executing proximity off")
			sendCommand(i_home, OFF)
			if(timerIMobileWlan!== null) {
				if(timerIMobileWlan.running) {
					timerIMobileWlan.cancel()
				}
				timerIMobileWlan = null
			}
		]
	} else {
		timerIMobileWlan.reschedule(now.plusSeconds(1200))
	}
end

rule "M Mobile Wlan Proximity Timer Leave"
when
	Item Mobile_m_wlan changed from ON to OFF
then
	logInfo("org.openhab.rules","m wlan off. starting timer.")
	if( timerMMobileWlan==null ) {
		timerMMobileWlan = createTimer(now.plusSeconds(2400)) [|
			logInfo("org.openhab.rules", "M mobile timer has timed out. Executing proximity off")
			sendCommand(m_home, OFF)
			if(timerMMobileWlan!== null) {
				if(timerMMobileWlan.running) {
					timerMMobileWlan.cancel()
				}
				timerMMobileWlan = null
			}
		]
	} else {
		timerMMobileWlan.reschedule(now.plusSeconds(1200))
	}
end

rule "No one at home" 
when
	Item Home changed from ON to OFF
then
	sendCommand(screen_pi_screen, OFF)
end

rule "When someone comes home"
when
	Item Home changed from OFF to ON or
	Item a_home changed from OFF to ON or
	Item stein_home changed from OFF to ON or
	Item i_home changed from OFF to ON or
	Item m_home changed from OFF to ON 
then
	sendCommand(activate_cameras, OFF)
	logInfo("proximity.rules", "Deactivating cameras as someone is coming home.")
	sendCommand(screen_pi_screen, ON)
end
